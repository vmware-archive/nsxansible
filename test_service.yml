#Creating a service
- name: Create a service
  nsx_service:
    nsxmanager_spec: 
      raml_file: "nsxraml/nsxvapi.raml"
      host: "nsxmanager.example.com"
      user: "admin"
      password: "l0ngPassw0rd!!"
    state: present
    name: app_tcp_test
    application_protocol: TCP
    port_range: 20,21,22,80,443

#Deleting a service
- name: Delete a service
  nsx_service:
    nsxmanager_spec: 
      raml_file: "nsxraml/nsxvapi.raml"
      host: "nsxmanager.example.com"
      user: "admin"
      password: "l0ngPassw0rd!!"
    state: absent
    application_id: application-18

#Query for all the services and display them in a human readable format
- name: Query all existing services 
  nsx_service:
    nsxmanager_spec: 
      raml_file: "nsxraml/nsxvapi.raml"
      host: "nsxmanager.example.com"
      user: "admin"
      password: "l0ngPassw0rd!!"
    state: query
    register: result
    
- debug: var=result.msg.split("\n")


#Querying for a specific service 
- name: Query if a service for SSH exists
  nsx_service:
    nsxmanager_spec: 
      raml_file: "nsxraml/nsxvapi.raml"
      host: "nsxmanager.example.com"
      user: "admin"
      password: "l0ngPassw0rd!!"
    state: query
    port_range: 22
  register: result_ssh

#Display the port_range to application_id mapping for the above
- debug: var=result_ssh.answer
   
#Conditionally creating a service listening on port 8080 
#1)Check if the service actually exists
#2)If yes, get the applicaiton ID for the same
#3)If no, create a new service and get the application ID 

- name: Query if a service for port 8080 exists
  nsx_service:
    nsxmanager_spec: 
      raml_file: "nsxraml/nsxvapi.raml"
      host: "nsxmanager.example.com"
      user: "admin"
      password: "l0ngPassw0rd!!"
    state: query
    port_range: 8080
  register: result_8080


- name: If the service above exists, get the application ID for the service
  set_fact: "app_id_8080={{result_8080.answer.application_id}}"
  when: result_8080.answer

- name: If the service for 8080 does not exist, create a new service for the same
  nsx_service:
    nsxmanager_spec: 
      raml_file: "nsxraml/nsxvapi.raml"
      host: "nsxmanager.example.com"
      user: "admin"
      password: "l0ngPassw0rd!!"
    state: present
    name: app_8080
    application_protocol: TCP
    port_range: 8080
  register: result
  when: not result_8080.answer

- name: If the service for 8080 does not exist, get the application ID for the newly created service above
  set_fact: "app_id_8080={{result.meta.objectId}}"
  when: not result_8080.answer

- name: Display the application ID of the service with port 8080
  debug: msg="The application ID for the service is {{app_id_8080}}"

